[{"model": "judge.miscconfig", "pk": 1, "fields": {"key": "footer", "value": "<a style=\"color: #808080\" href=\"https://mcpt.ca\"><b>MCPT</b></a> |\r\n<a style=\"color: #808080\" href=\"http://ecoocs.org\">ECOO</a> |\r\n<a style=\"color: #808080\" href=\"https://github.com/Ninjaclasher/ecoo-judge\">Source code</a>"}}, {"model": "judge.problem", "pk": 1, "fields": {"code": "helloworld", "name": "Hello, World!", "description": "Welcome to the judge!\r\n\r\nThis task will help you get used to submitting. In this task, you must print out the message `Hello, World!` \u2014 the judge is very strict, so you must output it with the same capitalization and punctuation.\r\n\r\nOnce you have a solution, click the `Submit solution` button to the right (on desktop) or above (on mobile) to submit. If there are issues with the problem or if you have any questions, feel free to click the `Report an issue` button.\r\n\r\nAfter you have gotten the hang of submitting, try out some harder problems like [A Plus B](/problem/aplusb/) or [Fizz Buzz](/problem/fizzbuzz/).", "time_limit": 2.0, "memory_limit": 262144, "short_circuit": false, "points": 100.0, "partial": false, "is_public": true, "is_manually_managed": true, "date": "2020-05-01T04:00:00Z", "og_image": "", "summary": "", "user_count": 0, "is_organization_private": false, "authors": [], "curators": [], "testers": [], "allowed_languages": [42, 43, 30, 7, 72, 39, 35, 36, 45, 2, 9, 33, 69, 29, 37, 15, 49, 56, 58, 57, 12, 64, 11, 50, 74, 25, 67, 76, 22, 10, 40, 34, 16, 62, 31, 23, 8, 75, 5, 4, 68, 47, 1, 6, 13, 14, 63, 17, 44, 70, 52, 41, 60, 54, 38, 51, 24, 27], "banned_users": [], "organizations": []}}, {"model": "judge.problem", "pk": 2, "fields": {"code": "aplusb", "name": "A Plus B", "description": "In this task, you must print out the result of ~a+b~.\r\n\r\n## Input Specification\r\n\r\nThe first line will contain ~2~ integers, ~a, b~ ~(-10^9 \\le a, b \\le 10^9)~.\r\n\r\n## Output Specification\r\n\r\nPrint the result of ~a+b~.\r\n\r\n## Sample Input\r\n```\r\n4 99\r\n```\r\n\r\n## Sample Output\r\n```\r\n103\r\n```", "time_limit": 2.0, "memory_limit": 262144, "short_circuit": false, "points": 100.0, "partial": false, "is_public": true, "is_manually_managed": true, "date": "2020-05-01T04:00:00Z", "og_image": "", "summary": "", "user_count": 0, "is_organization_private": false, "authors": [], "curators": [], "testers": [], "allowed_languages": [42, 43, 30, 7, 72, 39, 35, 36, 45, 2, 9, 33, 69, 29, 37, 15, 49, 56, 58, 57, 12, 64, 11, 50, 74, 25, 67, 76, 22, 10, 40, 34, 16, 62, 31, 23, 8, 75, 5, 4, 68, 47, 1, 6, 13, 14, 63, 17, 44, 70, 52, 41, 60, 54, 38, 51, 24, 27], "banned_users": [], "organizations": []}}, {"model": "judge.problem", "pk": 3, "fields": {"code": "fizzbuzz", "name": "Fizz Buzz", "description": "The iconic coding interview question to filter out bad programmers. Fizz Buzz. It's deceptively simple, yet ~199~ out of ~200~ interviewees cannot solve the problem. The task is simple: Print out a list of numbers from ~1~ to ~N~, but replace multiples of ~3~ with `fizz`, multiples of ~5~ with `buzz` and multiples of both with `fizzbuzz`. Can you pass the interview?\r\n\r\n## Input Specification\r\nThere will be one line of input containing one integer, ~N~, the number to stop at. ~N~ is between ~20~ and ~10^5~, inclusive.\r\n\r\n## Output Specification\r\nOutput the numbers from ~1~ to ~N~ (inclusive), replacing multiples of ~3~ with `fizz`, multiples of ~5~ with `buzz` and multiples of both with `fizzbuzz`.\r\n\r\n## Sample Input\r\n    20\r\n\r\n## Sample Output\r\n    1\r\n    2\r\n    fizz\r\n    4\r\n    buzz\r\n    fizz\r\n    7\r\n    8\r\n    fizz\r\n    buzz\r\n    11\r\n    fizz\r\n    13\r\n    14\r\n    fizzbuzz\r\n    16\r\n    17\r\n    fizz\r\n    19\r\n    buzz", "time_limit": 4.0, "memory_limit": 262144, "short_circuit": false, "points": 100.0, "partial": false, "is_public": true, "is_manually_managed": true, "date": "2020-05-01T04:00:00Z", "og_image": "", "summary": "", "user_count": 0, "is_organization_private": false, "authors": [], "curators": [], "testers": [], "allowed_languages": [42, 43, 30, 7, 72, 39, 35, 36, 45, 2, 9, 33, 69, 29, 37, 15, 49, 56, 58, 57, 12, 64, 11, 50, 74, 25, 67, 76, 22, 10, 40, 34, 16, 62, 31, 23, 8, 75, 5, 4, 68, 47, 1, 6, 13, 14, 63, 17, 44, 70, 52, 41, 60, 54, 38, 51, 24, 27], "banned_users": [], "organizations": []}}, {"model": "judge.navigationbar", "pk": 1, "fields": {"order": 1, "key": "problems", "label": "Problems", "path": "/problems/", "regex": "^/problem", "parent": null, "lft": 1, "rght": 2, "tree_id": 1, "level": 0}}, {"model": "judge.navigationbar", "pk": 2, "fields": {"order": 2, "key": "submit", "label": "Submissions", "path": "/submissions/", "regex": "^/submi|^/src/", "parent": null, "lft": 1, "rght": 6, "tree_id": 2, "level": 0}}, {"model": "judge.navigationbar", "pk": 3, "fields": {"order": 3, "key": "user", "label": "Users", "path": "/users/", "regex": "^/user", "parent": null, "lft": 1, "rght": 2, "tree_id": 3, "level": 0}}, {"model": "judge.navigationbar", "pk": 5, "fields": {"order": 5, "key": "contest", "label": "Contests", "path": "/contests/", "regex": "^/contest", "parent": null, "lft": 1, "rght": 2, "tree_id": 4, "level": 0}}, {"model": "judge.navigationbar", "pk": 7, "fields": {"order": 7, "key": "status", "label": "Status", "path": "/status/", "regex": "^/status/$|^/judge/", "parent": 2, "lft": 2, "rght": 3, "tree_id": 2, "level": 1}}, {"model": "judge.navigationbar", "pk": 8, "fields": {"order": 9, "key": "codes", "label": "Codes", "path": "/codes/", "regex": "^/codes/$", "parent": 2, "lft": 4, "rght": 5, "tree_id": 2, "level": 1}}, {"model": "judge.language", "pk": 1, "fields": {"key": "PY2", "name": "Python 2", "short_name": "", "common_name": "Python", "ace": "python", "pygments": "python", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 2, "fields": {"key": "CPP03", "name": "C++03", "short_name": "C++03", "common_name": "C++", "ace": "c_cpp", "pygments": "cpp", "template": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 4, "fields": {"key": "PHP", "name": "PHP", "short_name": null, "common_name": "PHP", "ace": "php", "pygments": "php", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 5, "fields": {"key": "PERL", "name": "Perl", "short_name": "", "common_name": "Perl", "ace": "perl", "pygments": "perl", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 6, "fields": {"key": "PY3", "name": "Python 3", "short_name": "", "common_name": "Python", "ace": "python", "pygments": "python3", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 7, "fields": {"key": "C", "name": "C", "short_name": "", "common_name": "C", "ace": "c_cpp", "pygments": "c", "template": "#include <stdio.h>\r\n\r\nint main() {\r\n    return 0;\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 8, "fields": {"key": "PAS", "name": "Pascal", "short_name": "", "common_name": "Pascal", "ace": "pas", "pygments": "pascal", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 9, "fields": {"key": "CPP11", "name": "C++11", "short_name": "C++11", "common_name": "C++", "ace": "c_cpp", "pygments": "cpp", "template": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 10, "fields": {"key": "MONOCS", "name": "C#", "short_name": "C#", "common_name": "C#", "ace": "csharp", "pygments": "c#", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 11, "fields": {"key": "HASK", "name": "Haskell", "short_name": "HASK", "common_name": "Haskell", "ace": "haskell", "pygments": "haskell", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 12, "fields": {"key": "GO", "name": "Go", "short_name": "GO", "common_name": "Go", "ace": "golang", "pygments": "go", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 13, "fields": {"key": "PYPY", "name": "PyPy 2", "short_name": "PYPY2", "common_name": "Python", "ace": "python", "pygments": "python", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 14, "fields": {"key": "PYPY3", "name": "PyPy 3", "short_name": "PYPY3", "common_name": "Python", "ace": "python", "pygments": "python3", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 15, "fields": {"key": "F95", "name": "Fortran", "short_name": "", "common_name": "Fortran", "ace": "fortran", "pygments": "fortran", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 16, "fields": {"key": "NASM", "name": "NASM", "short_name": "", "common_name": "Assembly", "ace": "assembly_x86", "pygments": "nasm", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 17, "fields": {"key": "RUBY2", "name": "Ruby 2", "short_name": "", "common_name": "Ruby", "ace": "ruby", "pygments": "ruby", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 22, "fields": {"key": "LUA", "name": "Lua", "short_name": "LUA", "common_name": "Lua", "ace": "lua", "pygments": "lua", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 23, "fields": {"key": "OCAML", "name": "OCaml", "short_name": "OCAML", "common_name": "OCaml", "ace": "ocaml", "pygments": "ocaml", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 24, "fields": {"key": "TUR", "name": "Turing", "short_name": "", "common_name": "Turing", "ace": "turing", "pygments": "turing", "template": "", "info": "tprologc; OpenTuring 1.0.0", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 25, "fields": {"key": "JAVA8", "name": "Java 8", "short_name": null, "common_name": "Java", "ace": "java", "pygments": "java", "template": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n\r\n    }\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 27, "fields": {"key": "V8JS", "name": "V8 JavaScript", "short_name": null, "common_name": "JS", "ace": "javascript", "pygments": "javascript", "template": "/* \r\n * This is a custom version of V8 that adds six functions in order to perform I/O and aid in online judging.\r\n *\r\n * * `print(...)`: similar to Python's `print`, prints all argument separated by space followed by new line.\r\n * * `flush()`: flushes stdout, ensuring everything output by `print()` immediately shows up.\r\n * * `gets()`: similar to the Ruby equivalent, returns one line of input from `stdin`.\r\n * * `read(bytes)`: read `bytes` bytes from stdin as an `ArrayBuffer`.\r\n * * `write(buffer)`: write a typed array, `ArrayBuffer`, or a view of `ArrayBuffer` to stdout.\r\n * * `quit(code)`: exits the program with `code`.\r\n * * You can also assign to the global variable `autoflush` to control whether `print()` flushes.\r\n *\r\n */", "info": "", "description": "This is a custom version of V8 that adds six functions in order to perform I/O and aid in online judging.\r\n\r\n* `print(...)`: similar to Python's `print`, prints all argument separated by space followed by new line.\r\n* `flush()`: flushes stdout, ensuring everything output by `print()` immediately shows up.\r\n* `gets()`: similar to the Ruby equivalent, returns one line of input from `stdin`.\r\n* `read(bytes)`: read `bytes` bytes from stdin as an [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer).\r\n* `write(buffer)`: write a typed array, `ArrayBuffer`, or a view of `ArrayBuffer` to stdout.\r\n* `quit(code)`: exits the program with `code`.\r\n* You can also assign to the global variable `autoflush` to control whether `print()` flushes.", "extension": ""}}, {"model": "judge.language", "pk": 29, "fields": {"key": "D", "name": "D", "short_name": "", "common_name": "D", "ace": "d", "pygments": "d", "template": "import std.stdio;\r\n\r\nvoid main() {\r\n\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 30, "fields": {"key": "BF", "name": "Brain****", "short_name": null, "common_name": "Brain****", "ace": "plain_text", "pygments": "bf", "template": "", "info": "", "description": "Classical [brain\\*\\*\\*\\*](http://www.muppetlabs.com/~breadbox/bf/) with as many byte-sized cells as there are bytes in the memory limit.", "extension": ""}}, {"model": "judge.language", "pk": 31, "fields": {"key": "OBJC", "name": "Objective-C", "short_name": "", "common_name": "ObjC", "ace": "objectivec", "pygments": "objc", "template": "", "info": "", "description": "Objective-C with GNUstep Base 1.22.1 on GCC 4.7.2+.", "extension": ""}}, {"model": "judge.language", "pk": 33, "fields": {"key": "CPP14", "name": "C++14", "short_name": "C++14", "common_name": "C++", "ace": "c_cpp", "pygments": "cpp", "template": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 34, "fields": {"key": "MONOVB", "name": "Visual Basic", "short_name": "VB", "common_name": "VB", "ace": "vbscript", "pygments": "vb", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 35, "fields": {"key": "CLANG", "name": "Clang", "short_name": "Clang", "common_name": "C", "ace": "c_cpp", "pygments": "c", "template": "#include <stdio.h>\r\n\r\nint main() {\r\n    return 0;\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 36, "fields": {"key": "CLANGX", "name": "Clang++", "short_name": "Clang++", "common_name": "C++", "ace": "c_cpp", "pygments": "cpp", "template": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 37, "fields": {"key": "DART", "name": "Dart", "short_name": "DART", "common_name": "Dart", "ace": "dart", "pygments": "dart", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 38, "fields": {"key": "TCL", "name": "TCL", "short_name": "TCL", "common_name": "TCL", "ace": "tcl", "pygments": "tcl", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 39, "fields": {"key": "CBL", "name": "COBOL", "short_name": "", "common_name": "COBOL", "ace": "cobol", "pygments": "cobol", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 40, "fields": {"key": "MONOFS", "name": "F#", "short_name": "F#", "common_name": "F#", "ace": "fsharp", "pygments": "fsharp", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 41, "fields": {"key": "SCM", "name": "Scheme", "short_name": "SCM", "common_name": "Scheme", "ace": "scheme", "pygments": "scheme", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 42, "fields": {"key": "ADA", "name": "Ada", "short_name": "ADA", "common_name": "Ada", "ace": "ada", "pygments": "ada", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 43, "fields": {"key": "AWK", "name": "AWK", "short_name": "AWK", "common_name": "Awk", "ace": "AWK", "pygments": "awk", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 44, "fields": {"key": "RUST", "name": "Rust", "short_name": "RUST", "common_name": "Rust", "ace": "rust", "pygments": "rust", "template": "#[macro_use] extern crate dmoj;\r\n\r\nfn main() {\r\n    println!(\"Hello, World!\");\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 45, "fields": {"key": "COFFEE", "name": "CoffeeScript", "short_name": "", "common_name": "JS", "ace": "coffee", "pygments": "coffeescript", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 47, "fields": {"key": "PRO", "name": "Prolog", "short_name": "PRO", "common_name": "Prolog", "ace": "prolog", "pygments": "prolog", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 49, "fields": {"key": "FORTH", "name": "Forth", "short_name": "FORTH", "common_name": "Forth", "ace": "forth", "pygments": "forth", "template": "", "info": "", "description": "Gforth 0.7.2.\r\n\r\nSubmissions ran as `gforth <source>.fs -e bye`.", "extension": ""}}, {"model": "judge.language", "pk": 50, "fields": {"key": "ICK", "name": "INTERCAL", "short_name": "", "common_name": "Intercal", "ace": "text", "pygments": "text", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 51, "fields": {"key": "TEXT", "name": "Text", "short_name": "", "common_name": "Text", "ace": "text", "pygments": "text", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 52, "fields": {"key": "SCALA", "name": "Scala", "short_name": "SCALA", "common_name": "Scala", "ace": "scala", "pygments": "scala", "template": "// Must be the same name as the problem code\r\nobject problemcode extends App {\r\n    \r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 54, "fields": {"key": "SWIFT", "name": "Swift", "short_name": null, "common_name": "Swift", "ace": "swift", "pygments": "swift", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 56, "fields": {"key": "GAS32", "name": "Assembly (x86)", "short_name": "", "common_name": "Assembly", "ace": "assembly_x86", "pygments": "gas", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 57, "fields": {"key": "GASARM", "name": "Assembly (ARM)", "short_name": "", "common_name": "Assembly", "ace": "assembly_x86", "pygments": "gas", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 58, "fields": {"key": "GAS64", "name": "Assembly (x64)", "short_name": "", "common_name": "Assembly", "ace": "assembly_x86", "pygments": "gas", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 60, "fields": {"key": "SED", "name": "Sed", "short_name": "", "common_name": "Sed", "ace": "perl", "pygments": "perl", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 62, "fields": {"key": "NASM64", "name": "NASM64", "short_name": "", "common_name": "Assembly", "ace": "assembly_x86", "pygments": "nasm", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 63, "fields": {"key": "RKT", "name": "Racket", "short_name": "", "common_name": "Racket", "ace": "lisp", "pygments": "racket", "template": "#lang racket", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 64, "fields": {"key": "GROOVY", "name": "Groovy", "short_name": "Groovy", "common_name": "Groovy", "ace": "groovy", "pygments": "groovy", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 67, "fields": {"key": "KOTLIN", "name": "Kotlin", "short_name": "", "common_name": "Kotlin", "ace": "kotlin", "pygments": "kotlin", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 68, "fields": {"key": "PIKE", "name": "Pike", "short_name": "", "common_name": "Pike", "ace": "pike", "pygments": "pike", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 69, "fields": {"key": "CPP17", "name": "C++17", "short_name": "C++17", "common_name": "C++", "ace": "c_cpp", "pygments": "cpp", "template": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 70, "fields": {"key": "SBCL", "name": "Lisp", "short_name": "Lisp", "common_name": "Lisp", "ace": "lisp", "pygments": "lisp", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 72, "fields": {"key": "C11", "name": "C11", "short_name": null, "common_name": "C", "ace": "c_cpp", "pygments": "c", "template": "#include <stdio.h>\r\n\r\nint main() {\r\n    return 0;\r\n}", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 74, "fields": {"key": "JAVA11", "name": "Java 11", "short_name": null, "common_name": "Java", "ace": "java", "pygments": "java", "template": "", "info": "", "description": "", "extension": ""}}, {"model": "judge.language", "pk": 75, "fields": {"key": "PDE", "name": "Processing", "short_name": null, "common_name": "Processing", "ace": "java", "pygments": "java", "template": "/*\r\n * This is a custom version of Processing that adds seven methods in order to perform I/O and aid in online judging.\r\n *\r\n * * `char readChar()` Reads a single character from `stdin`.\r\n * * `int readInt()` Reads an `int` from `stdin`.\r\n * * `long readLong()` Reads a `long` from `stdin`.\r\n * * `double readDouble()` Reads a `double` from `stdin`.\r\n * * `String readString()` Reads a space* *terminated `String` from `stdin`.\r\n * * `String readLine()` Reads a newline* *terminated `String` from `stdin`.\r\n * * `void flush()` Flushes `stdout`.\r\n *\r\n */\r\n\r\nvoid setup() {\r\n}", "info": "", "description": "This is a custom version of Processing that adds seven methods in order to perform I/O and aid in online judging.\r\n\r\n - `char readChar()` Reads a single character from `stdin`.\r\n - `int readInt()` Reads an `int` from `stdin`.\r\n - `long readLong()` Reads a `long` from `stdin`.\r\n - `double readDouble()` Reads a `double` from `stdin`.\r\n - `String readString()` Reads a space-terminated `String` from `stdin`.\r\n - `String readLine()` Reads a newline-terminated `String` from `stdin`.\r\n - `void flush()` Flushes `stdout`.", "extension": ""}}, {"model": "judge.language", "pk": 76, "fields": {"key": "LCODE", "name": "LOLCODE", "short_name": null, "common_name": "LOLCODE", "ace": "lolcode", "pygments": "lolcode", "template": "HAI 1.2\r\n\r\nKTHXBYE", "info": "", "description": "", "extension": ""}}, {"model": "judge.problem_allowed_languages", "pk": 1, "fields": {"problem": 1, "language": 1}}, {"model": "judge.problem_allowed_languages", "pk": 2, "fields": {"problem": 1, "language": 2}}, {"model": "judge.problem_allowed_languages", "pk": 3, "fields": {"problem": 1, "language": 4}}, {"model": "judge.problem_allowed_languages", "pk": 4, "fields": {"problem": 1, "language": 5}}, {"model": "judge.problem_allowed_languages", "pk": 5, "fields": {"problem": 1, "language": 6}}, {"model": "judge.problem_allowed_languages", "pk": 6, "fields": {"problem": 1, "language": 7}}, {"model": "judge.problem_allowed_languages", "pk": 7, "fields": {"problem": 1, "language": 8}}, {"model": "judge.problem_allowed_languages", "pk": 8, "fields": {"problem": 1, "language": 9}}, {"model": "judge.problem_allowed_languages", "pk": 9, "fields": {"problem": 1, "language": 10}}, {"model": "judge.problem_allowed_languages", "pk": 10, "fields": {"problem": 1, "language": 11}}, {"model": "judge.problem_allowed_languages", "pk": 11, "fields": {"problem": 1, "language": 12}}, {"model": "judge.problem_allowed_languages", "pk": 12, "fields": {"problem": 1, "language": 13}}, {"model": "judge.problem_allowed_languages", "pk": 13, "fields": {"problem": 1, "language": 14}}, {"model": "judge.problem_allowed_languages", "pk": 14, "fields": {"problem": 1, "language": 15}}, {"model": "judge.problem_allowed_languages", "pk": 15, "fields": {"problem": 1, "language": 16}}, {"model": "judge.problem_allowed_languages", "pk": 16, "fields": {"problem": 1, "language": 17}}, {"model": "judge.problem_allowed_languages", "pk": 17, "fields": {"problem": 1, "language": 22}}, {"model": "judge.problem_allowed_languages", "pk": 18, "fields": {"problem": 1, "language": 23}}, {"model": "judge.problem_allowed_languages", "pk": 19, "fields": {"problem": 1, "language": 24}}, {"model": "judge.problem_allowed_languages", "pk": 20, "fields": {"problem": 1, "language": 25}}, {"model": "judge.problem_allowed_languages", "pk": 21, "fields": {"problem": 1, "language": 27}}, {"model": "judge.problem_allowed_languages", "pk": 22, "fields": {"problem": 1, "language": 29}}, {"model": "judge.problem_allowed_languages", "pk": 23, "fields": {"problem": 1, "language": 30}}, {"model": "judge.problem_allowed_languages", "pk": 24, "fields": {"problem": 1, "language": 31}}, {"model": "judge.problem_allowed_languages", "pk": 25, "fields": {"problem": 1, "language": 33}}, {"model": "judge.problem_allowed_languages", "pk": 26, "fields": {"problem": 1, "language": 34}}, {"model": "judge.problem_allowed_languages", "pk": 27, "fields": {"problem": 1, "language": 35}}, {"model": "judge.problem_allowed_languages", "pk": 28, "fields": {"problem": 1, "language": 36}}, {"model": "judge.problem_allowed_languages", "pk": 29, "fields": {"problem": 1, "language": 37}}, {"model": "judge.problem_allowed_languages", "pk": 30, "fields": {"problem": 1, "language": 38}}, {"model": "judge.problem_allowed_languages", "pk": 31, "fields": {"problem": 1, "language": 39}}, {"model": "judge.problem_allowed_languages", "pk": 32, "fields": {"problem": 1, "language": 40}}, {"model": "judge.problem_allowed_languages", "pk": 33, "fields": {"problem": 1, "language": 41}}, {"model": "judge.problem_allowed_languages", "pk": 34, "fields": {"problem": 1, "language": 42}}, {"model": "judge.problem_allowed_languages", "pk": 35, "fields": {"problem": 1, "language": 43}}, {"model": "judge.problem_allowed_languages", "pk": 36, "fields": {"problem": 1, "language": 44}}, {"model": "judge.problem_allowed_languages", "pk": 37, "fields": {"problem": 1, "language": 45}}, {"model": "judge.problem_allowed_languages", "pk": 38, "fields": {"problem": 1, "language": 47}}, {"model": "judge.problem_allowed_languages", "pk": 39, "fields": {"problem": 1, "language": 49}}, {"model": "judge.problem_allowed_languages", "pk": 40, "fields": {"problem": 1, "language": 50}}, {"model": "judge.problem_allowed_languages", "pk": 41, "fields": {"problem": 1, "language": 51}}, {"model": "judge.problem_allowed_languages", "pk": 42, "fields": {"problem": 1, "language": 52}}, {"model": "judge.problem_allowed_languages", "pk": 43, "fields": {"problem": 1, "language": 54}}, {"model": "judge.problem_allowed_languages", "pk": 44, "fields": {"problem": 1, "language": 56}}, {"model": "judge.problem_allowed_languages", "pk": 45, "fields": {"problem": 1, "language": 57}}, {"model": "judge.problem_allowed_languages", "pk": 46, "fields": {"problem": 1, "language": 58}}, {"model": "judge.problem_allowed_languages", "pk": 47, "fields": {"problem": 1, "language": 60}}, {"model": "judge.problem_allowed_languages", "pk": 48, "fields": {"problem": 1, "language": 62}}, {"model": "judge.problem_allowed_languages", "pk": 49, "fields": {"problem": 1, "language": 63}}, {"model": "judge.problem_allowed_languages", "pk": 50, "fields": {"problem": 1, "language": 64}}, {"model": "judge.problem_allowed_languages", "pk": 51, "fields": {"problem": 1, "language": 67}}, {"model": "judge.problem_allowed_languages", "pk": 52, "fields": {"problem": 1, "language": 68}}, {"model": "judge.problem_allowed_languages", "pk": 53, "fields": {"problem": 1, "language": 69}}, {"model": "judge.problem_allowed_languages", "pk": 54, "fields": {"problem": 1, "language": 70}}, {"model": "judge.problem_allowed_languages", "pk": 55, "fields": {"problem": 1, "language": 72}}, {"model": "judge.problem_allowed_languages", "pk": 56, "fields": {"problem": 1, "language": 74}}, {"model": "judge.problem_allowed_languages", "pk": 57, "fields": {"problem": 1, "language": 75}}, {"model": "judge.problem_allowed_languages", "pk": 58, "fields": {"problem": 1, "language": 76}}, {"model": "judge.problem_allowed_languages", "pk": 59, "fields": {"problem": 2, "language": 1}}, {"model": "judge.problem_allowed_languages", "pk": 60, "fields": {"problem": 2, "language": 2}}, {"model": "judge.problem_allowed_languages", "pk": 61, "fields": {"problem": 2, "language": 4}}, {"model": "judge.problem_allowed_languages", "pk": 62, "fields": {"problem": 2, "language": 5}}, {"model": "judge.problem_allowed_languages", "pk": 63, "fields": {"problem": 2, "language": 6}}, {"model": "judge.problem_allowed_languages", "pk": 64, "fields": {"problem": 2, "language": 7}}, {"model": "judge.problem_allowed_languages", "pk": 65, "fields": {"problem": 2, "language": 8}}, {"model": "judge.problem_allowed_languages", "pk": 66, "fields": {"problem": 2, "language": 9}}, {"model": "judge.problem_allowed_languages", "pk": 67, "fields": {"problem": 2, "language": 10}}, {"model": "judge.problem_allowed_languages", "pk": 68, "fields": {"problem": 2, "language": 11}}, {"model": "judge.problem_allowed_languages", "pk": 69, "fields": {"problem": 2, "language": 12}}, {"model": "judge.problem_allowed_languages", "pk": 70, "fields": {"problem": 2, "language": 13}}, {"model": "judge.problem_allowed_languages", "pk": 71, "fields": {"problem": 2, "language": 14}}, {"model": "judge.problem_allowed_languages", "pk": 72, "fields": {"problem": 2, "language": 15}}, {"model": "judge.problem_allowed_languages", "pk": 73, "fields": {"problem": 2, "language": 16}}, {"model": "judge.problem_allowed_languages", "pk": 74, "fields": {"problem": 2, "language": 17}}, {"model": "judge.problem_allowed_languages", "pk": 75, "fields": {"problem": 2, "language": 22}}, {"model": "judge.problem_allowed_languages", "pk": 76, "fields": {"problem": 2, "language": 23}}, {"model": "judge.problem_allowed_languages", "pk": 77, "fields": {"problem": 2, "language": 24}}, {"model": "judge.problem_allowed_languages", "pk": 78, "fields": {"problem": 2, "language": 25}}, {"model": "judge.problem_allowed_languages", "pk": 79, "fields": {"problem": 2, "language": 27}}, {"model": "judge.problem_allowed_languages", "pk": 80, "fields": {"problem": 2, "language": 29}}, {"model": "judge.problem_allowed_languages", "pk": 81, "fields": {"problem": 2, "language": 30}}, {"model": "judge.problem_allowed_languages", "pk": 82, "fields": {"problem": 2, "language": 31}}, {"model": "judge.problem_allowed_languages", "pk": 83, "fields": {"problem": 2, "language": 33}}, {"model": "judge.problem_allowed_languages", "pk": 84, "fields": {"problem": 2, "language": 34}}, {"model": "judge.problem_allowed_languages", "pk": 85, "fields": {"problem": 2, "language": 35}}, {"model": "judge.problem_allowed_languages", "pk": 86, "fields": {"problem": 2, "language": 36}}, {"model": "judge.problem_allowed_languages", "pk": 87, "fields": {"problem": 2, "language": 37}}, {"model": "judge.problem_allowed_languages", "pk": 88, "fields": {"problem": 2, "language": 38}}, {"model": "judge.problem_allowed_languages", "pk": 89, "fields": {"problem": 2, "language": 39}}, {"model": "judge.problem_allowed_languages", "pk": 90, "fields": {"problem": 2, "language": 40}}, {"model": "judge.problem_allowed_languages", "pk": 91, "fields": {"problem": 2, "language": 41}}, {"model": "judge.problem_allowed_languages", "pk": 92, "fields": {"problem": 2, "language": 42}}, {"model": "judge.problem_allowed_languages", "pk": 93, "fields": {"problem": 2, "language": 43}}, {"model": "judge.problem_allowed_languages", "pk": 94, "fields": {"problem": 2, "language": 44}}, {"model": "judge.problem_allowed_languages", "pk": 95, "fields": {"problem": 2, "language": 45}}, {"model": "judge.problem_allowed_languages", "pk": 96, "fields": {"problem": 2, "language": 47}}, {"model": "judge.problem_allowed_languages", "pk": 97, "fields": {"problem": 2, "language": 49}}, {"model": "judge.problem_allowed_languages", "pk": 98, "fields": {"problem": 2, "language": 50}}, {"model": "judge.problem_allowed_languages", "pk": 99, "fields": {"problem": 2, "language": 51}}, {"model": "judge.problem_allowed_languages", "pk": 100, "fields": {"problem": 2, "language": 52}}, {"model": "judge.problem_allowed_languages", "pk": 101, "fields": {"problem": 2, "language": 54}}, {"model": "judge.problem_allowed_languages", "pk": 102, "fields": {"problem": 2, "language": 56}}, {"model": "judge.problem_allowed_languages", "pk": 103, "fields": {"problem": 2, "language": 57}}, {"model": "judge.problem_allowed_languages", "pk": 104, "fields": {"problem": 2, "language": 58}}, {"model": "judge.problem_allowed_languages", "pk": 105, "fields": {"problem": 2, "language": 60}}, {"model": "judge.problem_allowed_languages", "pk": 106, "fields": {"problem": 2, "language": 62}}, {"model": "judge.problem_allowed_languages", "pk": 107, "fields": {"problem": 2, "language": 63}}, {"model": "judge.problem_allowed_languages", "pk": 108, "fields": {"problem": 2, "language": 64}}, {"model": "judge.problem_allowed_languages", "pk": 109, "fields": {"problem": 2, "language": 67}}, {"model": "judge.problem_allowed_languages", "pk": 110, "fields": {"problem": 2, "language": 68}}, {"model": "judge.problem_allowed_languages", "pk": 111, "fields": {"problem": 2, "language": 69}}, {"model": "judge.problem_allowed_languages", "pk": 112, "fields": {"problem": 2, "language": 70}}, {"model": "judge.problem_allowed_languages", "pk": 113, "fields": {"problem": 2, "language": 72}}, {"model": "judge.problem_allowed_languages", "pk": 114, "fields": {"problem": 2, "language": 74}}, {"model": "judge.problem_allowed_languages", "pk": 115, "fields": {"problem": 2, "language": 75}}, {"model": "judge.problem_allowed_languages", "pk": 116, "fields": {"problem": 2, "language": 76}}, {"model": "judge.problem_allowed_languages", "pk": 117, "fields": {"problem": 3, "language": 1}}, {"model": "judge.problem_allowed_languages", "pk": 118, "fields": {"problem": 3, "language": 2}}, {"model": "judge.problem_allowed_languages", "pk": 119, "fields": {"problem": 3, "language": 4}}, {"model": "judge.problem_allowed_languages", "pk": 120, "fields": {"problem": 3, "language": 5}}, {"model": "judge.problem_allowed_languages", "pk": 121, "fields": {"problem": 3, "language": 6}}, {"model": "judge.problem_allowed_languages", "pk": 122, "fields": {"problem": 3, "language": 7}}, {"model": "judge.problem_allowed_languages", "pk": 123, "fields": {"problem": 3, "language": 8}}, {"model": "judge.problem_allowed_languages", "pk": 124, "fields": {"problem": 3, "language": 9}}, {"model": "judge.problem_allowed_languages", "pk": 125, "fields": {"problem": 3, "language": 10}}, {"model": "judge.problem_allowed_languages", "pk": 126, "fields": {"problem": 3, "language": 11}}, {"model": "judge.problem_allowed_languages", "pk": 127, "fields": {"problem": 3, "language": 12}}, {"model": "judge.problem_allowed_languages", "pk": 128, "fields": {"problem": 3, "language": 13}}, {"model": "judge.problem_allowed_languages", "pk": 129, "fields": {"problem": 3, "language": 14}}, {"model": "judge.problem_allowed_languages", "pk": 130, "fields": {"problem": 3, "language": 15}}, {"model": "judge.problem_allowed_languages", "pk": 131, "fields": {"problem": 3, "language": 16}}, {"model": "judge.problem_allowed_languages", "pk": 132, "fields": {"problem": 3, "language": 17}}, {"model": "judge.problem_allowed_languages", "pk": 133, "fields": {"problem": 3, "language": 22}}, {"model": "judge.problem_allowed_languages", "pk": 134, "fields": {"problem": 3, "language": 23}}, {"model": "judge.problem_allowed_languages", "pk": 135, "fields": {"problem": 3, "language": 24}}, {"model": "judge.problem_allowed_languages", "pk": 136, "fields": {"problem": 3, "language": 25}}, {"model": "judge.problem_allowed_languages", "pk": 137, "fields": {"problem": 3, "language": 27}}, {"model": "judge.problem_allowed_languages", "pk": 138, "fields": {"problem": 3, "language": 29}}, {"model": "judge.problem_allowed_languages", "pk": 139, "fields": {"problem": 3, "language": 30}}, {"model": "judge.problem_allowed_languages", "pk": 140, "fields": {"problem": 3, "language": 31}}, {"model": "judge.problem_allowed_languages", "pk": 141, "fields": {"problem": 3, "language": 33}}, {"model": "judge.problem_allowed_languages", "pk": 142, "fields": {"problem": 3, "language": 34}}, {"model": "judge.problem_allowed_languages", "pk": 143, "fields": {"problem": 3, "language": 35}}, {"model": "judge.problem_allowed_languages", "pk": 144, "fields": {"problem": 3, "language": 36}}, {"model": "judge.problem_allowed_languages", "pk": 145, "fields": {"problem": 3, "language": 37}}, {"model": "judge.problem_allowed_languages", "pk": 146, "fields": {"problem": 3, "language": 38}}, {"model": "judge.problem_allowed_languages", "pk": 147, "fields": {"problem": 3, "language": 39}}, {"model": "judge.problem_allowed_languages", "pk": 148, "fields": {"problem": 3, "language": 40}}, {"model": "judge.problem_allowed_languages", "pk": 149, "fields": {"problem": 3, "language": 41}}, {"model": "judge.problem_allowed_languages", "pk": 150, "fields": {"problem": 3, "language": 42}}, {"model": "judge.problem_allowed_languages", "pk": 151, "fields": {"problem": 3, "language": 43}}, {"model": "judge.problem_allowed_languages", "pk": 152, "fields": {"problem": 3, "language": 44}}, {"model": "judge.problem_allowed_languages", "pk": 153, "fields": {"problem": 3, "language": 45}}, {"model": "judge.problem_allowed_languages", "pk": 154, "fields": {"problem": 3, "language": 47}}, {"model": "judge.problem_allowed_languages", "pk": 155, "fields": {"problem": 3, "language": 49}}, {"model": "judge.problem_allowed_languages", "pk": 156, "fields": {"problem": 3, "language": 50}}, {"model": "judge.problem_allowed_languages", "pk": 157, "fields": {"problem": 3, "language": 51}}, {"model": "judge.problem_allowed_languages", "pk": 158, "fields": {"problem": 3, "language": 52}}, {"model": "judge.problem_allowed_languages", "pk": 159, "fields": {"problem": 3, "language": 54}}, {"model": "judge.problem_allowed_languages", "pk": 160, "fields": {"problem": 3, "language": 56}}, {"model": "judge.problem_allowed_languages", "pk": 161, "fields": {"problem": 3, "language": 57}}, {"model": "judge.problem_allowed_languages", "pk": 162, "fields": {"problem": 3, "language": 58}}, {"model": "judge.problem_allowed_languages", "pk": 163, "fields": {"problem": 3, "language": 60}}, {"model": "judge.problem_allowed_languages", "pk": 164, "fields": {"problem": 3, "language": 62}}, {"model": "judge.problem_allowed_languages", "pk": 165, "fields": {"problem": 3, "language": 63}}, {"model": "judge.problem_allowed_languages", "pk": 166, "fields": {"problem": 3, "language": 64}}, {"model": "judge.problem_allowed_languages", "pk": 167, "fields": {"problem": 3, "language": 67}}, {"model": "judge.problem_allowed_languages", "pk": 168, "fields": {"problem": 3, "language": 68}}, {"model": "judge.problem_allowed_languages", "pk": 169, "fields": {"problem": 3, "language": 69}}, {"model": "judge.problem_allowed_languages", "pk": 170, "fields": {"problem": 3, "language": 70}}, {"model": "judge.problem_allowed_languages", "pk": 171, "fields": {"problem": 3, "language": 72}}, {"model": "judge.problem_allowed_languages", "pk": 172, "fields": {"problem": 3, "language": 74}}, {"model": "judge.problem_allowed_languages", "pk": 173, "fields": {"problem": 3, "language": 75}}, {"model": "judge.problem_allowed_languages", "pk": 174, "fields": {"problem": 3, "language": 76}}, {"model": "flatpages.flatpage", "pk": 1, "fields": {"url": "/codes/", "title": "Status Codes", "content": "This page lists all status codes encountered on the judge and their description. It should be noted that it is possible for a test case to be given multiple status codes (indeed, this is usually the case for non-AC verdicts), in which case the one with the highest priority will be displayed. This page lists status codes in order of increasing priority.\r\n\r\n## AC - Accepted ##\r\nYour program passed testing! In some cases, this may be accompanied with additional feedback from the grader.\r\n\r\n## WA - Wrong Answer ##\r\nYour program did not crash while executing, but the output it produced was wrong. As for AC, this may be accompanied with additional feedback stating what you did wrong.\r\n\r\n## IR - Invalid Return ##\r\nYour program returned with a nonzero exit code (if you're not using a native language like C++, it crashed). For languages like Python or Java, this will typically be accompanied with the name of the exception your program threw, e.g., `NameError` or `java.lang.NullPointerException`, respectively.\r\n\r\n## RTE - Runtime Exception ##\r\nYour program caused a runtime exception to occur. This will only occur for native languages like C or C++. WLMOJ maps many common RTEs to more useful descriptions, described below.\r\n\r\n<table class=\"table\" style=\"width:100%\">\r\n<tr>\r\n<th style=\"min-width:17em\">Feedback</th>\r\n<th style=\"text-align:left\">Description</th>\r\n<tr>\r\n<td style=\"vertical-align:middle\">`segmentation fault`, `bus error`</td>\r\n<td style=\"text-align:left\">Your program was killed by SIGSEGV or SIGBUS. Generally, this means you ran out of memory, but among other things it can also mean that you are accessing arrays out of bounds.\r\n</td>\r\n<tr>\r\n<td style=\"vertical-align:middle\">`floating point exception`</td>\r\n<td style=\"text-align:left\">Your program performed a bad arithmetic operation, such as division by zero.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"vertical-align:middle\">`killed`</td>\r\n<td style=\"text-align:left\">Your program was killed by the runtime for some reason (which we don't know).</td>\r\n</tr>\r\n<tr>\r\n<td style=\"vertical-align:middle\">`opening files is not allowed`</td>\r\n<td style=\"text-align:left\">Unless a problem specifically says you can, you may not open files \u2014 doing so will get you this message.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"vertical-align:middle\">`{} syscall disallowed`</td>\r\n<td style=\"text-align:left\">Unless you are doing something of a dubious nature, you should never see this message.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"vertical-align:middle\"><code><a href=\"http://www.cplusplus.com/reference/new/bad_alloc/\">std::bad_alloc</a></code></td>\r\n<td style=\"text-align:left\">`new` failed to allocate enough memory. All C++ exceptions are mapped to feedback like this, though this is the most common exception you're likely to encounter.</td>\r\n</tr>\r\n<tr>\r\n<td style=\"vertical-align:middle\">`failed initializing`</td>\r\n<td style=\"text-align:left\">Your program uses too much data defined in global scope for it to fit inside the memory constraints at startup. A typical example is code like\r\n\r\n<pre><span></span><code><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10000</span><span class=\"p\">][</span><span class=\"mi\">10000</span><span class=\"p\">];</span></code></pre>\r\n\r\non a problem with a 64mb memory limit \u2014 the aforementioned array will take 381mb, far above the allowed limit.\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n## OLE - Output Limit Exceeded ##\r\nYour program outputted too much data to `stdout`, typically over 256mb (though some problems may have custom \u2014 generally larger \u2014 constraints).\r\n\r\n## MLE - Memory Limit Exceeded ##\r\nYour program ran out of memory. Sometimes, this might manifest itself as an RTE with `segmentation fault` or `std::bad_alloc`.\r\n\r\n## TLE - Time Limit Exceeded ##\r\nYour program took too long to execute.\r\n\r\n## IE - Internal Error ##\r\nIf you see this, it means either the judge encountered an error or the problemsetter's configuration is incorrect. IEs will typically be resolved quickly, and your submission will be rejudged.", "enable_comments": false, "template_name": "flatpages/markdown_math.html", "registration_required": false, "sites": [1]}}, {"model": "flatpages.flatpage", "pk": 2, "fields": {"url": "/tips/", "title": "Tips", "content": "- <a href=\"#java-main\">Java tips</a>\r\n  - <a href=\"#java-input\">Reading input</a>\r\n  - <a href=\"#java-sort\">Sorting arrays</a>\r\n  - <a href=\"#java-hsa\">hsa.Console</a>\r\n- <a href=\"#python-main\">Python tips</a>\r\n  - <a href=\"#python-speed\">Execution speed</a>\r\n  - <a href=\"#python-in\">Reading input</a>\r\n  - <a href=\"#python-inn\">Reading real and integer values</a>\r\n  - <a href=\"#python-site\">Using `site` functions (like `exit`)</a>\r\n- <a href=\"#c-main\">C/C++ tips</a>\r\n  - <a href=\"#c-alloc\">Allocating</a>\r\n  - <a href=\"#cpp-io\">Input and Output</a>\r\n  - <a href=\"#i-l-ll\">int, long, and long long</a>\r\n\r\n<p><a name=\"java-main\"></a></p>\r\n## Tips for Java Contestants\r\n\r\n<p><a name=\"java-input\"></a></p>\r\n### Reading Input\r\n\r\nJava's `java.util.Scanner` on `System.in` is *extremely* slow, having to do a really large number of highly expensive conversions. If you time out on a problem while using the `Scanner` class, consider switching to `java.io.BufferedReader` for reading input.\r\n\r\n```java\r\nScanner in = new Scanner(System.in);\r\nint a = in.nextInt();\r\nint b = in.nextInt();\r\n```\r\n\r\nbecomes\r\n\r\n```java\r\nBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\nString[] tokens = in.readLine().split(\" \");\r\nint a = Integer.parseInt(tokens[0]);\r\nint b = Integer.parseInt(tokens[1]);\r\n```\r\n\r\nThe judging system patches the standard `System.in` stream with a faster alternative that allows `Scanner` to perform reasonably, but this behavior is unique to the judge - your code won't run as fast on most other contest systems. Therefore, you should attempt to use `BufferedReader` whenever you need to read input. **It's over 100 times faster!**\r\n\r\n**Note:** the underlying input stream is not a file stream, so polling methods like `BufferedReader.ready` might spuriously return false even if the end of the input has not been reached.\r\n\r\n<p><a name=\"java-sort\"></a></p>\r\n### Sorting Arrays\r\n\r\nJava 8 uses a dual-pivot quicksort algorithm to sort primitive arrays. While this provides fast sorting in most cases, it has a worst-case time complexity of ~\\mathcal{O}(N^2)~ - terrible for large arrays. If your code times out while using `Arrays.sort(primitive[])`, consider using `Collections.sort` or `Arrays.sort(Object[])`. The latter uses a Timsort implementation, which is guaranteed ~\\mathcal{O}(N \\log N)~ worst case performance: much faster than quicksort's ~\\mathcal{O}(N^2)~. In most cases, converting code using primitive sorting to Object sorting is trivial:\r\n\r\n```java\r\nint[] a = new int[N];\r\nfor(int i = 0; i < N; i++) {\r\n    a[i] = ...\r\n}\r\nArrays.sort(a);\r\n```\r\n\r\nbecomes\r\n\r\n```java\r\nInteger[] a = new Integer[N];\r\nfor(int i = 0; i < N; i++) {\r\n    a[i] = ...\r\n}\r\nArrays.sort(a);\r\n```\r\n\r\nThe only difference in the two variations is the change from an `int` datatype to an `Integer` datatype. In most aspects they are equivalent, except that `Integers` are objects (and hence use the `Array.sort(Object[])` method overload, instead of the potentially much slower `Arrays.sort(int[])`).\r\n\r\nDo note, however, that sorting on `Object` arrays is *generally* much slower than sorting on primitive arrays. When you're sure primitive array sorting will do fine (and it usually does), do not use `Object` array sorting.\r\n\r\n<p><a name=\"java-hsa\"></a></p>\r\n### hsa.Console\r\n\r\nSome ICS courses teach the usage of the `hsa.Console` object for doing console manipulation. **The judge does *not* support the `hsa.Console` class**. The judge is primarily a text-based input/output system, so using standard IO methods is required.\r\n\r\nEssentially, you should use `System.out.print` instead of `hsa.Console.print`, and the `BufferedReader` or `Scanner` (discouraged: see above) classes instead of `hsa.Console.readChar`.\r\n\r\n--------\r\n\r\n<a name=\"python-main\"></a>\r\n## Tips for Python Contestants\r\n\r\n<p><a name=\"python-speed\"></a></p>\r\n### Execution Speed\r\n\r\nPython, being an interpreted language, is *very noticeably* slower than compiled languages such as C, C++, or Java. **The speed difference is so significant that Python may be up to ~100~ to ~400~  times slower than the aforementioned languages**. In the real world, this is less of a problem than on algorithmic competitions and online judges. This issue can be alleviated by the usage of the PyPy interpreter (as opposed to the CPython interpreter), so if you're sure your solution is correct, but times out, try resubmitting with PyPy. Many problems on this judge are designed so that a solution with a good running time in Python can get Accepted, but you should note that for some problems, it is **impossible** to get Python accepted. The reason is that if the time limits were set so that a correct Python can pass, an incorrect solution in faster languages such as C, C++, or Java would also pass. Unfortunately, there is nothing we can do with the judge to make your Python submissions run as fast as C, so the best you can do is to learn one of the aforementioned languages (if you haven't already) to use in times when Python just isn't fast enough. However, Python programmers don't have to be discouraged. It is perfectly possible to write Python solutions which can perform faster than compiled languages.\r\n\r\n<p><a name=\"python-in\"></a></p>\r\n### Reading Input\r\n\r\nOften, your program will be bottlenecked not by your algorithm's speed but by the speed that you can read and write data from input and to output. You can speed up input by reading directly from `sys.stdin`.\r\n\r\n```python\r\nimport sys\r\nfor line in sys.stdin:\r\n    # Do something\r\n```\r\n\r\n`sys.stdin` is a file-like object. That is, you can manipulate it just as you would a file returned by `open`.\r\n\r\nA quick technique for faster input is to simply use `sys.stdin.readline` in place of all your string input calls.\r\n\r\nFor Python 2, this means\r\n```python\r\nimport sys\r\nraw_input = sys.stdin.readline\r\n```\r\n\r\nFor Python 3, this means\r\n```python\r\nimport sys\r\ninput = sys.stdin.readline\r\n```\r\n\r\nAn even faster and better solution is to buffer all of the problem input (if you know the input will be of a manageable size), and parse it yourself:\r\n\r\n```python\r\nimport sys\r\nall_data = sys.stdin.read().split('\\n')\r\n```\r\n\r\nThe above example stores all the lines of input in a list `all_data`. `all_data[0]` contains the first line of input, `all_data[1]` contains the second and so on. *This is the fastest possible way to input data in Python.*\r\n\r\n<p><a name=\"python-inn\"></a></p>\r\n### Faster Reading of Real and Integer Values\r\n\r\nThis section is solely for Python 2 contestants (Python 3 does not have this issue).\r\n\r\nIf struggling with IO speed, an easy technique is to change all your `input` calls to `sys.stdin.readline` calls and perform the casting yourself. If you know that `N` will be an integer, you can scrap the `input` call and do the type conversion yourself.\r\n\r\n```python\r\nN = input()\r\n```\r\n\r\nbecomes\r\n\r\n```python\r\nN = int(sys.stdin.readline())\r\n```\r\n\r\n**Performing your own casting is much faster! **It also protects you from nasty trailing returns in input that may exist on other online judges.\r\n\r\nBenchmark data (Python 2), reading a million ints from standard input:\r\n\r\n - `input()`: ~4.87823~ seconds\r\n - `int(raw_input())`: ~4.83112~ seconds\r\n - raw_input = `sys.stdin.readline; int(raw_input())`: ~0.69960~ seconds\r\n\r\nIt is without any doubt that `int(sys.stdin.readline())` should be used to read integers, `float(sys.stdin.readline())` for real numbers and so on. **Python 3 contestants should also make use of `sys.stdin` whenever they can.**\r\n\r\n<p><a name=\"python-site\"></a></p>\r\n### Using `site` functions (like `exit`)\r\n\r\nThe judge denies access to the `site` module, so functions that are injected into the builtin namespace \u2014 like `exit` \u2014 are disallowed.\r\n\r\n-------\r\n\r\n<p><a name=\"c-main\"></a></p>\r\n## Tips for C/C++ Contestants\r\n\r\n<p><a name=\"c-alloc\"></a></p>\r\n### Allocating\r\n\r\nRefrain from declaring big arrays as local variables, as it will often cause you to run out of stack space and fail with a Runtime Error.\r\n\r\nInstead of doing:\r\n\r\n```cpp\r\nint main()\r\n{\r\n    int N;\r\n    scanf(\"%d\", &N);\r\n    int arr[N];\r\n    for(int i = 0; i < N; i++) scanf(\"%d\", &arr[i]);\r\n}\r\n```\r\n\r\nconsider:\r\n\r\n```cpp\r\nint arr[100001];\r\nint main()\r\n{\r\n    int N;\r\n    scanf(\"%d\", &N);\r\n    for(int i = 0; i < N; i++) scanf(\"%d\", &arr[i]);\r\n}\r\n```\r\n\r\nDeclaring big arrays in global scope is a much safer approach as long as you know the maximum bound of N (and almost all problems give you upper bounds). Be wary of out of bounds array indices, though.\r\n\r\n<p><a name=\"cpp-io\"></a></p>\r\n### Input and Output\r\n\r\nIt is recommended for C++ users to use C-style input and output, namely `scanf` and `printf` instead of `cin` and `cout` for performance reasons.\r\n\r\nIf you must use `cin` and `cout`, you can put these two lines of code at the top of your main function:\r\n```cpp\r\nint main()\r\n{\r\n    cin.sync_with_stdio(0);\r\n    cin.tie(0);\r\n    ...\r\n}\r\n```\r\n\r\nto speed up the `cin` stream. This will unsync `cin` with `scanf` and `cout`. Note that you should not use `scanf` after unsyncing with `stdio`.\r\n\r\nAdditionally, you should not use `endl`, but rather `\\n` to output newlines when flushing is not required. `endl`'s flushing behavior can potentially cause your program to receive TLE instead of AC.\r\n\r\nFinally, if the problem only requires unsigned integral data types to be read, you can prepend this macro to the top of your source:\r\n\r\n```cpp\r\n#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)\r\nchar _;\r\n```\r\n\r\nInstead of `std::cin >> n`, or `scanf(\"%d\", &n)`, you would use `scan(n)`.\r\n\r\n<p><a name=\"i-l-ll\"></a></p>\r\n### `int`, `long`, and `long long`\r\n\r\nOn the judge, `int` is 32-bit, `long long` is 64-bit, and `long` can be either 32- or 64-bit depending on which judge your submission is graded on. Therefore, it is recommended to use either `int` or `long long`, but not `long`.", "enable_comments": false, "template_name": "flatpages/markdown_math.html", "registration_required": false, "sites": [1]}}]